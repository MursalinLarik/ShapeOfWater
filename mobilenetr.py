# -*- coding: utf-8 -*-
"""MobilenetR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zCGK5vd9FFH1sjWOxkeO2G5ZOvZeR0pr
"""

from google.colab import drive
drive.mount('/content/drive')

import os
from PIL import Image
import numpy as np
import tensorflow as tf
from keras import applications
from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers
from keras.models import Sequential, Model 
from keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D
from keras.models import Model
from keras.applications import MobileNet
from keras import backend as k 
from keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping
import matplotlib.pyplot as plt

mobile = applications.mobilenet.MobileNet()

#UPDATED TRANSFER LEARNING
base_model=MobileNet(weights='imagenet',include_top=False) 
#imports the mobilenet model and discards the last 1000 neuron layer.
x=base_model.output
x=GlobalAveragePooling2D()(x)
x=Dense(1024,activation='relu')(x) #we add dense layers
x=Dense(1024,activation='relu')(x) #dense layer 2
x=Dropout(0.25)(x) #dropoutlayer
x=Dense(512,activation='relu')(x) #dense layer 3
preds=Dense(2,activation='softmax')(x) #final layer with softmax activation

model=Model(inputs=base_model.input,outputs=preds)
for layer in base_model.layers:
    layer.trainable=False

Adam = optimizers.adam(lr=0.001)
sgd = optimizers.SGD(lr=0.0005, momentum=0.5, decay=0.001)
model.compile(optimizer = sgd,loss = "binary_crossentropy", metrics=["accuracy"])

# Commented out IPython magic to ensure Python compatibility.
# %cd My Drive
#Checking the root folder
!pwd

# Initiate the train and test generators with data Augumentation 

img_width, img_height = 224, 224
train_data_dir = "Training"

train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
                                   rescale=1/255, 
                                   validation_split=0.2, 
                                   rotation_range = 5,
                                   width_shift_range = 0.2,
                                   height_shift_range = 0.2,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

train_generator = train_datagen.flow_from_directory(train_data_dir,subset='training',target_size = (224, 224),
batch_size = 10)
validation_generator = train_datagen.flow_from_directory(train_data_dir,subset='validation',target_size = (224, 224),
batch_size = 10)

history = model.fit_generator(train_generator,validation_data=validation_generator,epochs=100,steps_per_epoch = 30,validation_steps=10)

model.save_weights('mobilenet-binary.h5')

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))
# plt.subplot(1, 2, 1)
plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.ylim(0.4,1)
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()

# plt.subplot(1, 2, 2)
plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.ylim(0,1.5)
plt.title('Training and validation loss')
plt.legend(loc=0)
plt.figure()

plt.show()